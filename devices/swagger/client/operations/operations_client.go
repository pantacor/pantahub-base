package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetDevices devices stored

The Devices endpoint returns a list of objects visible to the calling
user.

*/
func (a *Client) GetDevices(params *GetDevicesParams, authInfo runtime.ClientAuthInfoWriter) (*GetDevicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDevices",
		Method:             "GET",
		PathPattern:        "/devices/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetDevicesReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDevicesOK), nil
}

/*
GetDevicesDeviceID devices resource

The device is stored with an id, an owner and a secret

*/
func (a *Client) GetDevicesDeviceID(params *GetDevicesDeviceIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetDevicesDeviceIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesDeviceIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDevicesDeviceID",
		Method:             "GET",
		PathPattern:        "/devices/{device-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetDevicesDeviceIDReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDevicesDeviceIDOK), nil
}

/*
PostDevices news device

Create a new Device so it can join the fleet

*/
func (a *Client) PostDevices(params *PostDevicesParams, authInfo runtime.ClientAuthInfoWriter) (*PostDevicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDevicesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostDevices",
		Method:             "POST",
		PathPattern:        "/devices/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostDevicesReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostDevicesOK), nil
}

/*
PutDevicesDeviceID devices metainfo update

The Device meta information as a whole syntax. Returns the
new resource. You cannot change the owner

*/
func (a *Client) PutDevicesDeviceID(params *PutDevicesDeviceIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutDevicesDeviceIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDevicesDeviceIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutDevicesDeviceID",
		Method:             "PUT",
		PathPattern:        "/devices/{device-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutDevicesDeviceIDReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutDevicesDeviceIDOK), nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
