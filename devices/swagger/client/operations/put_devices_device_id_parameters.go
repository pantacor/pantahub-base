package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"pantahub-base/devices/swagger/models"
)

// NewPutDevicesDeviceIDParams creates a new PutDevicesDeviceIDParams object
// with the default values initialized.
func NewPutDevicesDeviceIDParams() *PutDevicesDeviceIDParams {
	var ()
	return &PutDevicesDeviceIDParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPutDevicesDeviceIDParamsWithTimeout creates a new PutDevicesDeviceIDParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPutDevicesDeviceIDParamsWithTimeout(timeout time.Duration) *PutDevicesDeviceIDParams {
	var ()
	return &PutDevicesDeviceIDParams{

		timeout: timeout,
	}
}

/*PutDevicesDeviceIDParams contains all the parameters to send to the API endpoint
for the put devices device ID operation typically these are written to a http.Request
*/
type PutDevicesDeviceIDParams struct {

	/*DeviceID
	  the device id to resolve

	*/
	DeviceID string
	/*Object
	  the new object meta data

	*/
	Object *models.Device

	timeout time.Duration
}

// WithDeviceID adds the deviceID to the put devices device ID params
func (o *PutDevicesDeviceIDParams) WithDeviceID(deviceID string) *PutDevicesDeviceIDParams {
	o.DeviceID = deviceID
	return o
}

// WithObject adds the object to the put devices device ID params
func (o *PutDevicesDeviceIDParams) WithObject(object *models.Device) *PutDevicesDeviceIDParams {
	o.Object = object
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *PutDevicesDeviceIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	// path param device-id
	if err := r.SetPathParam("device-id", o.DeviceID); err != nil {
		return err
	}

	if o.Object == nil {
		o.Object = new(models.Device)
	}

	if err := r.SetBodyParam(o.Object); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
