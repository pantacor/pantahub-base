package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetDevicesParams creates a new GetDevicesParams object
// with the default values initialized.
func NewGetDevicesParams() *GetDevicesParams {
	var ()
	return &GetDevicesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetDevicesParamsWithTimeout creates a new GetDevicesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetDevicesParamsWithTimeout(timeout time.Duration) *GetDevicesParams {
	var ()
	return &GetDevicesParams{

		timeout: timeout,
	}
}

/*GetDevicesParams contains all the parameters to send to the API endpoint
for the get devices operation typically these are written to a http.Request
*/
type GetDevicesParams struct {

	/*Maxitems
	  Max Items to retrieve (default "all")

	*/
	Maxitems *int64
	/*Start
	  Item top start this page

	*/
	Start *int64

	timeout time.Duration
}

// WithMaxitems adds the maxitems to the get devices params
func (o *GetDevicesParams) WithMaxitems(maxitems *int64) *GetDevicesParams {
	o.Maxitems = maxitems
	return o
}

// WithStart adds the start to the get devices params
func (o *GetDevicesParams) WithStart(start *int64) *GetDevicesParams {
	o.Start = start
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *GetDevicesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	if o.Maxitems != nil {

		// query param maxitems
		var qrMaxitems int64
		if o.Maxitems != nil {
			qrMaxitems = *o.Maxitems
		}
		qMaxitems := swag.FormatInt64(qrMaxitems)
		if qMaxitems != "" {
			if err := r.SetQueryParam("maxitems", qMaxitems); err != nil {
				return err
			}
		}

	}

	if o.Start != nil {

		// query param start
		var qrStart int64
		if o.Start != nil {
			qrStart = *o.Start
		}
		qStart := swag.FormatInt64(qrStart)
		if qStart != "" {
			if err := r.SetQueryParam("start", qStart); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
