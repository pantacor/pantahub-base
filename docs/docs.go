// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag at
// 2020-01-13 17:37:23.24299776 -0300 -03 m=+0.052016720

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/apps": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get all applications owned by a user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get all applications owned by a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "App ID|Nick|PRN",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/apps.TPApp"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid payload",
                        "schema": {
                            "$ref": "#/definitions/utils.RError"
                        }
                    },
                    "404": {
                        "description": "App not found",
                        "schema": {
                            "$ref": "#/definitions/utils.RError"
                        }
                    },
                    "500": {
                        "description": "Error processing request",
                        "schema": {
                            "$ref": "#/definitions/utils.RError"
                        }
                    }
                }
            }
        },
        "/apps/": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "This define a new application to be used as OAuth client",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Create a new third party application",
                "parameters": [
                    {
                        "description": "Create app body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/apps.CreateAppPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/apps.TPApp"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.RError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/utils.RError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.RError"
                        }
                    }
                }
            }
        },
        "/apps/scopes": {
            "get": {
                "description": "Get scopes for OAuth applications",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get scopes for OAuth applications",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID|Nick|PRN",
                        "name": "serviceID",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/utils.Scope"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid payload",
                        "schema": {
                            "$ref": "#/definitions/utils.RError"
                        }
                    },
                    "404": {
                        "description": "App not found",
                        "schema": {
                            "$ref": "#/definitions/utils.RError"
                        }
                    },
                    "500": {
                        "description": "Error processing request",
                        "schema": {
                            "$ref": "#/definitions/utils.RError"
                        }
                    }
                }
            }
        },
        "/apps/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get an oauth application",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get an oauth application",
                "parameters": [
                    {
                        "type": "string",
                        "description": "App ID|Nick|PRN",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/apps.TPApp"
                        }
                    },
                    "400": {
                        "description": "Invalid payload",
                        "schema": {
                            "$ref": "#/definitions/utils.RError"
                        }
                    },
                    "404": {
                        "description": "App not found",
                        "schema": {
                            "$ref": "#/definitions/utils.RError"
                        }
                    },
                    "500": {
                        "description": "Error processing request",
                        "schema": {
                            "$ref": "#/definitions/utils.RError"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update a third party application",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Update a third party application",
                "parameters": [
                    {
                        "type": "string",
                        "description": "App ID|Nick|PRN",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update app body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/apps.CreateAppPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/apps.TPApp"
                        }
                    },
                    "400": {
                        "description": "Invalid payload",
                        "schema": {
                            "$ref": "#/definitions/utils.RError"
                        }
                    },
                    "404": {
                        "description": "App not found",
                        "schema": {
                            "$ref": "#/definitions/utils.RError"
                        }
                    },
                    "500": {
                        "description": "Error processing request",
                        "schema": {
                            "$ref": "#/definitions/utils.RError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "delete an oauth client",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "delete an oauth client",
                "parameters": [
                    {
                        "type": "string",
                        "description": "App ID|Nick|PRN",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/apps.TPApp"
                        }
                    },
                    "400": {
                        "description": "Invalid payload",
                        "schema": {
                            "$ref": "#/definitions/utils.RError"
                        }
                    },
                    "404": {
                        "description": "App not found",
                        "schema": {
                            "$ref": "#/definitions/utils.RError"
                        }
                    },
                    "500": {
                        "description": "Error processing request",
                        "schema": {
                            "$ref": "#/definitions/utils.RError"
                        }
                    }
                }
            }
        },
        "/auth": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get user profile",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get user profile",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID|Nick|PRN",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/accounts.Account"
                        }
                    },
                    "400": {
                        "description": "Invalid payload",
                        "schema": {
                            "$ref": "#/definitions/utils.RError"
                        }
                    },
                    "404": {
                        "description": "Account not found",
                        "schema": {
                            "$ref": "#/definitions/utils.RError"
                        }
                    },
                    "500": {
                        "description": "Error processing request",
                        "schema": {
                            "$ref": "#/definitions/utils.RError"
                        }
                    }
                }
            }
        },
        "/auth/accounts": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get list of accounts",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get list of accounts",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/accounts.Account"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid payload",
                        "schema": {
                            "$ref": "#/definitions/utils.RError"
                        }
                    },
                    "403": {
                        "description": "user has no admin role",
                        "schema": {
                            "$ref": "#/definitions/utils.RError"
                        }
                    },
                    "404": {
                        "description": "Account not found",
                        "schema": {
                            "$ref": "#/definitions/utils.RError"
                        }
                    },
                    "500": {
                        "description": "Error processing request",
                        "schema": {
                            "$ref": "#/definitions/utils.RError"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Create a new account",
                "parameters": [
                    {
                        "description": "Account Payload",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.accountCreationPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/accounts.Account"
                        }
                    },
                    "400": {
                        "description": "Invalid payload",
                        "schema": {
                            "$ref": "#/definitions/utils.RError"
                        }
                    },
                    "404": {
                        "description": "Account not found",
                        "schema": {
                            "$ref": "#/definitions/utils.RError"
                        }
                    },
                    "412": {
                        "description": "Invalid payload",
                        "schema": {
                            "$ref": "#/definitions/utils.RError"
                        }
                    },
                    "500": {
                        "description": "Error processing request",
                        "schema": {
                            "$ref": "#/definitions/utils.RError"
                        }
                    }
                }
            }
        },
        "/auth/auth_status": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get JWT claims from Authorization header",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get JWT claims from Authorization header",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/accounts.Account"
                        }
                    },
                    "400": {
                        "description": "Invalid payload",
                        "schema": {
                            "$ref": "#/definitions/utils.RError"
                        }
                    },
                    "404": {
                        "description": "Account not found",
                        "schema": {
                            "$ref": "#/definitions/utils.RError"
                        }
                    },
                    "500": {
                        "description": "Error processing request",
                        "schema": {
                            "$ref": "#/definitions/utils.RError"
                        }
                    }
                }
            }
        },
        "/auth/password": {
            "post": {
                "description": "send email with token to user in order to reset password to given user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "send email with token to user in order to reset password to given user",
                "parameters": [
                    {
                        "description": "New password payload",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.passwordReset"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/accounts.Account"
                        }
                    },
                    "400": {
                        "description": "Invalid payload",
                        "schema": {
                            "$ref": "#/definitions/utils.RError"
                        }
                    },
                    "404": {
                        "description": "Account not found",
                        "schema": {
                            "$ref": "#/definitions/utils.RError"
                        }
                    },
                    "500": {
                        "description": "Error processing request",
                        "schema": {
                            "$ref": "#/definitions/utils.RError"
                        }
                    }
                }
            }
        },
        "/auth/recover": {
            "post": {
                "description": "send email with token to user in order to reset password to given user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "send email with token to user in order to reset password to given user",
                "parameters": [
                    {
                        "description": "Account recovery payload",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.passwordResetRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/accounts.Account"
                        }
                    },
                    "400": {
                        "description": "Invalid payload",
                        "schema": {
                            "$ref": "#/definitions/utils.RError"
                        }
                    },
                    "404": {
                        "description": "Account not found",
                        "schema": {
                            "$ref": "#/definitions/utils.RError"
                        }
                    },
                    "500": {
                        "description": "Error processing request",
                        "schema": {
                            "$ref": "#/definitions/utils.RError"
                        }
                    }
                }
            }
        },
        "/auth/verify": {
            "get": {
                "description": "Verify account payload",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Verify account payload",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/accounts.Account"
                        }
                    },
                    "400": {
                        "description": "Invalid payload",
                        "schema": {
                            "$ref": "#/definitions/utils.RError"
                        }
                    },
                    "404": {
                        "description": "Account not found",
                        "schema": {
                            "$ref": "#/definitions/utils.RError"
                        }
                    },
                    "500": {
                        "description": "Error processing request",
                        "schema": {
                            "$ref": "#/definitions/utils.RError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "accounts.Account": {
            "type": "object",
            "properties": {
                "challenge": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "nick": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "password_bcrypt": {
                    "type": "string"
                },
                "password_scrypt": {
                    "type": "string"
                },
                "prn": {
                    "type": "string"
                },
                "redirect_uris": {
                    "description": "Oauth2RedirectURIs is limiting the prefix available for redirecting users with oauth code and accesstoken to",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "time-created": {
                    "type": "string"
                },
                "time-modified": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "apps.CreateAppPayload": {
            "type": "object",
            "properties": {
                "exposed_scopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/utils.Scope"
                    }
                },
                "nick": {
                    "type": "string"
                },
                "redirect_uris": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/utils.Scope"
                    }
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "apps.TPApp": {
            "type": "object",
            "properties": {
                "deleted-at": {
                    "type": "string"
                },
                "exposedScopesLength": {
                    "type": "integer"
                },
                "exposed_scopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/utils.Scope"
                    }
                },
                "id": {
                    "type": "string"
                },
                "nick": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "owner-nick": {
                    "type": "string"
                },
                "prn": {
                    "type": "string"
                },
                "redirect_uris": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/utils.Scope"
                    }
                },
                "secret": {
                    "type": "string"
                },
                "time-created": {
                    "type": "string"
                },
                "time-modified": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "auth.accountCreationPayload": {
            "type": "object",
            "properties": {
                "captcha": {
                    "type": "string"
                },
                "challenge": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "encrypted-account": {
                    "type": "string"
                },
                "nick": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "password_bcrypt": {
                    "type": "string"
                },
                "password_scrypt": {
                    "type": "string"
                },
                "prn": {
                    "type": "string"
                },
                "redirect_uris": {
                    "description": "Oauth2RedirectURIs is limiting the prefix available for redirecting users with oauth code and accesstoken to",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "time-created": {
                    "type": "string"
                },
                "time-modified": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "auth.passwordReset": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "auth.passwordResetRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                }
            }
        },
        "utils.RError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "error": {
                    "type": "string"
                }
            }
        },
        "utils.Scope": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "required": {
                    "type": "boolean"
                },
                "service": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        },
        "BasicAuth": {
            "type": "basic"
        },
        "OAuth2AccessCode": {
            "type": "oauth2",
            "flow": "accessCode",
            "authorizationUrl": "/auth/authorize",
            "tokenUrl": "/auth/token"
        },
        "OAuth2Application": {
            "type": "oauth2",
            "flow": "application",
            "tokenUrl": "/auth/token",
            "scopes": {
                "admin": " Grants read and write access to administrative information",
                "write": " Grants write access"
            }
        },
        "OAuth2Implicit": {
            "type": "oauth2",
            "flow": "implicit",
            "authorizationUrl": "/auth/authorize",
            "scopes": {
                "admin": " Grants read and write access to administrative information",
                "write": " Grants write access"
            }
        },
        "OAuth2Password": {
            "type": "oauth2",
            "flow": "password",
            "tokenUrl": "/auth/token",
            "scopes": {
                "admin": " Grants read and write access to administrative information",
                "read": " Grants read access",
                "write": " Grants write access"
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "",
	BasePath:    "/",
	Schemes:     []string{},
	Title:       "Pantahub API reference",
	Description: "This is the pantahub API documentation to use our API.",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
