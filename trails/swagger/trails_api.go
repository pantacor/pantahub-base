/* 
 * PANTAHUB Core API - Trails
 *
 * Join the Federation of Humans and Things, with cloud and devices
 *
 * OpenAPI spec version: 1.0.0
 * Contact: asac129@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package swagger

import (
	"net/url"
	"encoding/json"
)

type TrailsApi struct {
	Configuration Configuration
}

func NewTrailsApi() *TrailsApi {
	configuration := NewConfiguration()
	return &TrailsApi{
		Configuration: *configuration,
	}
}

func NewTrailsApiWithBasePath(basePath string) *TrailsApi {
	configuration := NewConfiguration()
	configuration.BasePath = basePath

	return &TrailsApi{
		Configuration: *configuration,
	}
}

/**
 * Get Trails visible in calling context
 * Get a list of trails that are visible to the user/principle/roles associated with the calling context. Users usually see trails for all their devices, but devices only see their very own. 
 *
 * @param start Item top start this page
 * @param maxitems Max Items to retrieve (default \&quot;all\&quot;)
 * @return []Trail
 */
func (a TrailsApi) TrailsGet(start float32, maxitems float32) ([]Trail, *APIResponse, error) {

	var httpMethod = "Get"
	// create path and map variables
	path := a.Configuration.BasePath + "/trails"


	headerParams := make(map[string]string)
	queryParams := url.Values{}
	formParams := make(map[string]string)
	var postBody interface{}
	var fileName string
	var fileBytes []byte
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		headerParams[key] = a.Configuration.DefaultHeader[key]
	}
	queryParams.Add("start", a.Configuration.APIClient.ParameterToString(start, ""))
	queryParams.Add("maxitems", a.Configuration.APIClient.ParameterToString(maxitems, ""))


	// to determine the Content-Type header
	localVarHttpContentTypes := []string{  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		headerParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
	}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		headerParams["Accept"] = localVarHttpHeaderAccept
	}
	var successPayload = new([]Trail)
	httpResponse, err := a.Configuration.APIClient.CallAPI(path, httpMethod, postBody, headerParams, queryParams, formParams, fileName, fileBytes)
	if err != nil {
		return *successPayload, NewAPIResponse(httpResponse.RawResponse), err
	}
	err = json.Unmarshal(httpResponse.Body(), &successPayload)
	return *successPayload, NewAPIResponse(httpResponse.RawResponse), err
}

/**
 * Create new Trailing for device
 * Create a new Trail for the calling device. The Trail will have the same ID as the calling device. 
 *
 * @param factoryState Factory state json to seed during trail creation
 * @param maxitems Max Items to retrieve (default \&quot;all\&quot;)
 * @return []Trail
 */
func (a TrailsApi) TrailsPost(factoryState State, maxitems float32) ([]Trail, *APIResponse, error) {

	var httpMethod = "Post"
	// create path and map variables
	path := a.Configuration.BasePath + "/trails"


	headerParams := make(map[string]string)
	queryParams := url.Values{}
	formParams := make(map[string]string)
	var postBody interface{}
	var fileName string
	var fileBytes []byte
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		headerParams[key] = a.Configuration.DefaultHeader[key]
	}
	queryParams.Add("maxitems", a.Configuration.APIClient.ParameterToString(maxitems, ""))


	// to determine the Content-Type header
	localVarHttpContentTypes := []string{  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		headerParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
	}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		headerParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	postBody = &factoryState

	var successPayload = new([]Trail)
	httpResponse, err := a.Configuration.APIClient.CallAPI(path, httpMethod, postBody, headerParams, queryParams, formParams, fileName, fileBytes)
	if err != nil {
		return *successPayload, NewAPIResponse(httpResponse.RawResponse), err
	}
	err = json.Unmarshal(httpResponse.Body(), &successPayload)
	return *successPayload, NewAPIResponse(httpResponse.RawResponse), err
}

